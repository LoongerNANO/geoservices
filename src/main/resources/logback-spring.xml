<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <include resource="org/springframework/boot/logging/logback/defaults.xml"/>

    <!-- 日志级别从高到低：TRACE < DEBUG < INFO < WARN < ERROR < FATAL -->
    <!-- 设置上下文名称 -->
    <!-- <contextName></contextName> -->
    <!-- 通过%contextName来打印日志上下文名称 -->
    <!-- <contextName>ArcGIS</contextName> -->

    <!-- 定义变量值的标签 -->
    <!-- <property name="name" value="value"/> -->
    <!-- ${} 使用变量 -->
    <property name="LOG_HOME" value="c:/logs/"/>

    <!-- 输出策略 -->
    <!-- name 定义输出策略名称 -->
    <!-- class 指定哪种输出策略，常用就是控制台输出策略和文件输出策略 -->

    <!-- 输出到控制台 ConsoleAppender -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <!-- 级别过滤器 -->
        <!-- 如果只是想要 Info 级别的日志，只是过滤 info 还是会输出 Error 日志，因为 Error 的级别高， 所以我们使用下面的策略，可以避免输出 Error 的日志 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <!-- 过滤 Error -->
            <!-- <level>ERROR</level> -->
            <!-- 匹配到就禁止 -->
            <!-- <onMatch>DENY</onMatch> -->
            <!-- 没有匹配到就允许 -->
            <!-- <onMismatch>ACCEPT</onMismatch> -->
        </filter>
        <!-- 日志格式 encoder layout 区别 -->
        <!-- 参见 logback encoder设置 -->
        <encoder>
            <pattern>%boldGreen([%date{yyyy-MM-dd HH:mm:ss.SSS}]) %boldBlue([%thread]) %boldMagenta([%level]) %boldYellow([%logger{50}] %file:%line -)  %cyan(%msg%n)</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <appender name="INFO" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- DENY - 日志将立即被抛弃不再经过其他过滤器 -->
        <!-- NEUTRAL - 有序列表里的下个过滤器过接着处理日志 -->
        <!-- ACCEPT - 日志会被立即处理，不再经过剩余过滤器 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!--过滤 Error -->
            <level>INFO</level>
            <!--匹配到即处理 -->
            <onMatch>ACCEPT</onMatch>
            <!--没有匹配到即禁止 -->
            <onMismatch>DENY</onMismatch>
        </filter>
        <!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天的日志改名为今天的日期。即，<File> 的日志都是当天的。 -->
        <!--<File>logs/info.spring-boot-demo-logback.log</File> -->
        <!--滚动策略，按照时间滚动 TimeBasedRollingPolicy -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间 -->
            <FileNamePattern>${LOG_HOME}/%d{yyyy-MM-dd}/LOG_INFO_%i.log</FileNamePattern>
            <!--只保留最近90天的日志 -->
            <maxHistory>90</maxHistory>
            <!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志 -->
            <!--<totalSizeCap>1GB</totalSizeCap> -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- maxFileSize:这是活动文件的大小，默认值是10MB,本篇设置为1KB，只是为了演示 -->
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <!--<triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy"> -->
        <!--<maxFileSize>1KB</maxFileSize> -->
        <!--</triggeringPolicy> -->
        <encoder>
            <pattern>[%date{yyyy-MM-dd HH:mm:ss.SSS}] [%thread] [%level] [%logger{50}] %file:%line - %msg%n</pattern>
            <charset>UTF-8</charset> <!-- 此处设置字符集 -->
        </encoder>
    </appender>

    <appender name="ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- DENY - 日志将立即被抛弃不再经过其他过滤器 -->
        <!-- NEUTRAL - 有序列表里的下个过滤器过接着处理日志 -->
        <!-- ACCEPT - 日志会被立即处理，不再经过剩余过滤器 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!--过滤 Error -->
            <level>ERROR</level>
            <!--匹配到即处理 -->
            <onMatch>ACCEPT</onMatch>
            <!--没有匹配到即禁止 -->
            <onMismatch>DENY</onMismatch>
        </filter>
        <!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天的日志改名为今天的日期。即，<File> 的日志都是当天的。 -->
        <!--<File>logs/info.spring-boot-demo-logback.log</File> -->
        <!--滚动策略，按照时间滚动 TimeBasedRollingPolicy -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间 -->
            <FileNamePattern>${LOG_HOME}/%d{yyyy-MM-dd}/LOG_ERROR_%i.log</FileNamePattern>
            <!--只保留最近90天的日志 -->
            <maxHistory>90</maxHistory>
            <!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志 -->
            <!--<totalSizeCap>1GB</totalSizeCap> -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- maxFileSize:这是活动文件的大小，默认值是10MB,本篇设置为1KB，只是为了演示 -->
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <!--<triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy"> -->
        <!--<maxFileSize>1KB</maxFileSize> -->
        <!--</triggeringPolicy> -->
        <encoder>
            <pattern>[%date{yyyy-MM-dd HH:mm:ss.SSS}] [%thread] [%level] [%logger{50}] %file:%line - %msg%n</pattern>
            <charset>UTF-8</charset> <!-- 此处设置字符集 -->
        </encoder>
    </appender>

    <appender name="DEBUG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- DENY - 日志将立即被抛弃不再经过其他过滤器 -->
        <!-- NEUTRAL - 有序列表里的下个过滤器过接着处理日志 -->
        <!-- ACCEPT - 日志会被立即处理，不再经过剩余过滤器 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!--过滤 Error -->
            <level>DEBUG</level>
            <!--匹配到即处理 -->
            <onMatch>ACCEPT</onMatch>
            <!--没有匹配到即禁止 -->
            <onMismatch>DENY</onMismatch>
        </filter>
        <!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天的日志改名为今天的日期。即，<File> 的日志都是当天的。 -->
        <!--<File>logs/info.spring-boot-demo-logback.log</File> -->
        <!--滚动策略，按照时间滚动 TimeBasedRollingPolicy -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间 -->
            <FileNamePattern>${LOG_HOME}/%d{yyyy-MM-dd}/LOG_DEBUG_%i.log</FileNamePattern>
            <!--只保留最近90天的日志 -->
            <maxHistory>90</maxHistory>
            <!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志 -->
            <!--<totalSizeCap>1GB</totalSizeCap> -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- maxFileSize:这是活动文件的大小，默认值是10MB,本篇设置为1KB，只是为了演示 -->
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <!--<triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy"> -->
        <!--<maxFileSize>1KB</maxFileSize> -->
        <!--</triggeringPolicy> -->
        <encoder>
            <pattern>[%date{yyyy-MM-dd HH:mm:ss.SSS}] [%thread] [%level] [%logger{50}] %file:%line - %msg%n</pattern>
            <charset>UTF-8</charset> <!-- 此处设置字符集 -->
        </encoder>
    </appender>

    <appender name="WARN" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- DENY - 日志将立即被抛弃不再经过其他过滤器 -->
        <!-- NEUTRAL - 有序列表里的下个过滤器过接着处理日志 -->
        <!-- ACCEPT - 日志会被立即处理，不再经过剩余过滤器 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!--过滤 Error -->
            <level>WARN</level>
            <!--匹配到即处理 -->
            <onMatch>ACCEPT</onMatch>
            <!--没有匹配到即禁止 -->
            <onMismatch>DENY</onMismatch>
        </filter>
        <!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天的日志改名为今天的日期。即，<File> 的日志都是当天的。 -->
        <!--<File>logs/info.spring-boot-demo-logback.log</File> -->
        <!--滚动策略，按照时间滚动 TimeBasedRollingPolicy -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间 -->
            <FileNamePattern>${LOG_HOME}/%d{yyyy-MM-dd}/LOG_WARN_%i.log</FileNamePattern>
            <!--只保留最近90天的日志 -->
            <maxHistory>90</maxHistory>
            <!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志 -->
            <!--<totalSizeCap>1GB</totalSizeCap> -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- maxFileSize:这是活动文件的大小，默认值是10MB,本篇设置为1KB，只是为了演示 -->
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <!--<triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy"> -->
        <!--<maxFileSize>1KB</maxFileSize> -->
        <!--</triggeringPolicy> -->
        <encoder>
            <pattern>[%date{yyyy-MM-dd HH:mm:ss.SSS}] [%thread] [%level] [%logger{50}] %file:%line - %msg%n</pattern>
            <charset>UTF-8</charset> <!-- 此处设置字符集 -->
        </encoder>
    </appender>

    <root level="info">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="INFO"/>
        <appender-ref ref="ERROR"/>
        <appender-ref ref="DEBUG"/>
        <appender-ref ref="WARN"/>
    </root>
</configuration>